{"version":3,"sources":["utils.ts","taskStore.ts","features/AddTaskForm.tsx","features/ListItem.tsx","features/TasksList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["focusOnElementById","id","document","getElementById","focus","isOverdue","deadline","isPast","isToday","colors","TaskStore","tasksRegistryKey","appTasks","sortedAppTasks","sort","a","b","compareAsc","Date","Object","entries","reduce","tasks","appTask","group","toISOString","split","json","window","localStorage","getItem","this","JSON","parse","forEach","task","push","console","log","setItem","stringify","removeItem","groupAppTasksByDate","filter","done","observable","action","setTasksFromJson","computed","updateStorage","i","length","splice","TaskStoreContext","createContext","observer","createTask","useContext","useState","isAddingTask","setIsAddingTask","uuid","title","timeCreated","formValues","setFormValues","handleSubmit","trim","Container","textAlign","Transition","visible","duration","Button","inverted","circular","color","icon","onClick","onStart","fluid","animation","hide","show","Form","Input","name","placeholder","value","onChange","event","currentTarget","Group","floated","content","labelPosition","type","taskStore","completeTask","restoreTask","deleteTask","hoverItemId","setHoverItemId","List","Item","className","Segment","onMouseEnter","onMouseLeave","Grid","Row","Column","stretched","width","size","verticalAlign","disabled","addable","clearing","secondary","Label","attached","selection","map","key","tasksByDate","overdueTasks","doneTasks","useEffect","loadTasks","stackable","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a04ee36.chunk.js","sourcesContent":["import { isToday, isPast } from \"date-fns\";\r\n\r\nexport const focusOnElementById = (id: string, document: Document) => {\r\n  document.getElementById(id)?.focus();\r\n  return document.getElementById(id);\r\n};\r\n\r\nexport const isOverdue = (deadline: Date) => {\r\n  return isPast(deadline) && !isToday(deadline);\r\n};\r\n\r\nexport const colors = {\r\n  positive: \"violet\" as any,\r\n  negative: \"pink\" as any\r\n};\r\n","import { createContext } from \"react\";\r\nimport { observable, action, computed } from \"mobx\";\r\nimport { ITask } from \"./task\";\r\nimport { compareAsc, isToday } from \"date-fns\";\r\nimport { isOverdue } from \"./utils\";\r\n\r\nclass TaskStore {\r\n  tasksRegistryKey = \"tasksRegistryKey\";\r\n\r\n  @observable tasks: ITask[] = [];\r\n\r\n  @action loadTasks = () => {\r\n    if (window.localStorage.getItem(this.tasksRegistryKey) !== null) {\r\n      this.setTasksFromJson();\r\n    }\r\n  };\r\n\r\n  @computed get tasksByDate() {\r\n    return this.groupAppTasksByDate(\r\n      this.tasks.filter(\r\n        task => !task.done && !isOverdue(new Date(task.deadline))\r\n      )\r\n    );\r\n  }\r\n\r\n  @computed get overdueTasks() {\r\n    return this.tasks.filter(\r\n      appTask => !appTask.done && isOverdue(new Date(appTask.deadline))\r\n    );\r\n  }\r\n\r\n  @computed get doneTasks() {\r\n    return this.tasks.filter(appTask => appTask.done);\r\n  }\r\n\r\n  groupAppTasksByDate(appTasks: ITask[]) {\r\n    const sortedAppTasks = appTasks.sort((a, b) =>\r\n      compareAsc(new Date(a.deadline), new Date(b.deadline))\r\n    );\r\n\r\n    return Object.entries(\r\n      sortedAppTasks.reduce((tasks, appTask) => {\r\n        const deadline = new Date(appTask.deadline);\r\n\r\n        const group = isToday(deadline)\r\n          ? \"Today\"\r\n          : deadline.toISOString().split(\"T\")[0];\r\n\r\n        tasks[group] = tasks[group] ? [...tasks[group], appTask] : [appTask];\r\n        return tasks;\r\n      }, {} as { [key: string]: ITask[] })\r\n    );\r\n  }\r\n\r\n  @action createTask = (task: ITask) => {\r\n    this.tasks.push(task);\r\n    this.updateStorage();\r\n  };\r\n\r\n  @action completeTask = (id: string) => {\r\n    for (let i = 0; i < this.tasks.length; i++) {\r\n      if (this.tasks[i].id === id) {\r\n        this.tasks[i].done = true;\r\n        this.updateStorage();\r\n        return;\r\n      }\r\n    }\r\n    this.updateStorage();\r\n  };\r\n\r\n  @action restoreTask = (id: string) => {\r\n    for (let i = 0; i < this.tasks.length; i++) {\r\n      if (this.tasks[i].id === id) {\r\n        this.tasks[i].done = false;\r\n        this.updateStorage();\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  @action deleteTask = (id: string) => {\r\n    for (let i = 0; i < this.tasks.length; i++) {\r\n      if (this.tasks[i].id === id) {\r\n        this.tasks.splice(i, 1);\r\n        this.updateStorage();\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  setTasksFromJson() {\r\n    const json = window.localStorage.getItem(this.tasksRegistryKey);\r\n    if (json) {\r\n      this.tasks = [];\r\n      const arrayObject = JSON.parse(json);\r\n      arrayObject.forEach((task: ITask) => {\r\n        this.tasks.push(task);\r\n      });\r\n    }\r\n  }\r\n\r\n  updateStorage() {\r\n    if (this.tasks) {\r\n      console.log(this.tasks);\r\n      window.localStorage.setItem(\r\n        this.tasksRegistryKey,\r\n        JSON.stringify(this.tasks)\r\n      );\r\n    } else {\r\n      window.localStorage.removeItem(this.tasksRegistryKey);\r\n    }\r\n  }\r\n}\r\n\r\nexport const TaskStoreContext = createContext(new TaskStore());\r\n","import React, { useContext, useState, FormEvent } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Transition, Container, Form } from \"semantic-ui-react\";\r\nimport uuid from \"uuid\";\r\nimport { TaskStoreContext } from \"../taskStore\";\r\nimport { ITask } from \"../task\";\r\nimport { focusOnElementById, colors } from \"../utils\";\r\n\r\nconst AddTaskForm = () => {\r\n  const taskStore = useContext(TaskStoreContext);\r\n\r\n  const { createTask } = taskStore;\r\n\r\n  const [isAddingTask, setIsAddingTask] = useState(false);\r\n  const [formValues, setFormValues] = useState<ITask>({\r\n    id: uuid(),\r\n    title: \"\",\r\n    done: false,\r\n    deadline: new Date(),\r\n    timeCreated: new Date()\r\n  });\r\n\r\n  const handleformValuesChange = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.currentTarget;\r\n    setFormValues({ ...formValues, [name]: value });\r\n  };\r\n\r\n  const cancelAdding = () => {\r\n    setIsAddingTask(false);\r\n    setFormValues({ ...formValues, title: \"\" });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (\r\n      !formValues.title ||\r\n      (formValues.title && formValues.title.trim() === \"\")\r\n    ) {\r\n      cancelAdding();\r\n      return;\r\n    }\r\n\r\n    createTask(formValues);\r\n\r\n    setFormValues({\r\n      id: uuid(),\r\n      title: \"\",\r\n      done: false,\r\n      deadline: new Date(),\r\n      timeCreated: new Date()\r\n    });\r\n\r\n    focusOnElementById(\"inputTitle\", document);\r\n  };\r\n\r\n  return (\r\n    <Container textAlign=\"center\">\r\n      <Transition visible={!isAddingTask} duration={0}>\r\n        <div>\r\n          <Button\r\n            inverted\r\n            circular\r\n            color={colors.positive}\r\n            icon=\"plus\"\r\n            onClick={() => setIsAddingTask(true)}\r\n          />\r\n        </div>\r\n      </Transition>\r\n      <Transition\r\n        onStart={() => focusOnElementById(\"titleInput\", document)}\r\n        fluid\r\n        visible={isAddingTask}\r\n        animation=\"slide down\"\r\n        duration={{ hide: 0, show: 300 }}\r\n      >\r\n        <Form>\r\n          <Form.Input\r\n            id=\"titleInput\"\r\n            fluid\r\n            name=\"title\"\r\n            placeholder=\"Add new task\"\r\n            value={formValues.title}\r\n            onChange={handleformValuesChange}\r\n          />\r\n          <Button.Group floated=\"left\">\r\n            <Button\r\n              icon=\"check\"\r\n              color={colors.positive}\r\n              content=\"Save\"\r\n              labelPosition=\"left\"\r\n              type=\"submit\"\r\n              onClick={() => handleSubmit()}\r\n            />\r\n            <Button\r\n              icon=\"close\"\r\n              color={colors.negative}\r\n              onClick={() => {\r\n                setIsAddingTask(false);\r\n                setFormValues({ ...formValues, title: \"\" });\r\n              }}\r\n            />\r\n          </Button.Group>\r\n        </Form>\r\n      </Transition>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(AddTaskForm);\r\n","import React, { useContext, useState, Fragment } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ITask } from \"../task\";\r\nimport { TaskStoreContext } from \"../taskStore\";\r\nimport {\r\n  List,\r\n  Segment,\r\n  Grid,\r\n  Button,\r\n  Container,\r\n  Transition\r\n} from \"semantic-ui-react\";\r\nimport { colors } from \"../utils\";\r\n\r\nconst ListItem: React.FC<{ task: ITask }> = ({ task }) => {\r\n  const taskStore = useContext(TaskStoreContext);\r\n  const { completeTask, restoreTask, deleteTask } = taskStore;\r\n  const [hoverItemId, setHoverItemId] = useState(\"\");\r\n\r\n  return (\r\n    <List.Item className=\"p-0\">\r\n      <Segment\r\n        className=\"p-2\"\r\n        onMouseEnter={() => setHoverItemId(task.id)}\r\n        onMouseLeave={() => setHoverItemId(\"\")}\r\n      >\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column stretched className=\"pr-0\" width={2}>\r\n              <Button\r\n                inverted\r\n                icon={task.done ? \"undo\" : \"check\"}\r\n                color={task.done ? colors.negative : colors.positive}\r\n                size=\"tiny\"\r\n                onClick={\r\n                  task.done\r\n                    ? () => {\r\n                        restoreTask(task.id);\r\n                        setHoverItemId(\"\");\r\n                      }\r\n                    : () => {\r\n                        completeTask(task.id);\r\n                        setHoverItemId(\"\");\r\n                      }\r\n                }\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column className=\"text-break\" width={11}>\r\n              <Container className=\"py-3\" content={task.title} />\r\n            </Grid.Column>\r\n            <Grid.Column width={3} verticalAlign=\"top\" textAlign=\"right\">\r\n              <Fragment>\r\n                <Transition\r\n                  visible={hoverItemId === task.id}\r\n                  animation=\"scale\"\r\n                  duration={0}\r\n                >\r\n                  <div>\r\n                    <Button\r\n                      circular\r\n                      inverted\r\n                      disabled={task.done}\r\n                      icon=\"ban\"\r\n                      color={colors.negative}\r\n                      size=\"tiny\"\r\n                      onClick={() => {\r\n                        deleteTask(task.id);\r\n                        setHoverItemId(\"\");\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </Transition>\r\n              </Fragment>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    </List.Item>\r\n  );\r\n};\r\n\r\nexport default observer(ListItem);\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Segment, Label, List } from \"semantic-ui-react\";\r\nimport { ITask } from \"../task\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\nimport ListItem from \"./ListItem\";\r\nimport { colors } from \"../utils\";\r\n\r\nconst TasksList: React.FC<{\r\n  tasks: ITask[];\r\n  group: string;\r\n  addable?: boolean;\r\n}> = ({ tasks, group, addable }) => {\r\n  return (\r\n    <Segment\r\n      clearing\r\n      secondary\r\n      color={addable ? colors.positive : colors.negative}\r\n    >\r\n      <Label\r\n        size=\"large\"\r\n        color={addable ? colors.positive : colors.negative}\r\n        attached=\"top\"\r\n        content={group}\r\n      />\r\n      <List selection>\r\n        {tasks.map(task => (\r\n          <ListItem task={task} key={task.id} />\r\n        ))}\r\n      </List>\r\n      {addable && <AddTaskForm />}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(TasksList);\r\n","import React, { Fragment, useEffect, useContext } from \"react\";\nimport { TaskStoreContext } from \"./taskStore\";\nimport TasksList from \"./features/TasksList\";\nimport { Segment, Grid } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\n\nconst App = () => {\n  const taskStore = useContext(TaskStoreContext);\n  const { tasksByDate, overdueTasks, doneTasks } = taskStore;\n\n  useEffect(() => {\n    taskStore.loadTasks();\n  }, [taskStore]);\n\n  return (\n    <Segment attached>\n      <Grid stackable>\n        <Grid.Column width={8}>\n          <Fragment>\n            {tasksByDate.length === 0 ? (\n              <Fragment key=\"Default\">\n                <TasksList addable tasks={[]} group=\"Today\" />\n              </Fragment>\n            ) : (\n              tasksByDate.map(([group, appTasks]) => (\n                <Fragment key={group}>\n                  <TasksList addable tasks={appTasks} group={group} />\n                </Fragment>\n              ))\n            )}\n          </Fragment>\n        </Grid.Column>\n        <Grid.Column width={8}>\n          <TasksList tasks={overdueTasks} group=\"Overdue\" />\n          <TasksList tasks={doneTasks} group=\"Done\" />\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}